apply from: project.file('cucumber.gradle')

dependencies {
    testCompile project(':common')
    testCompile ':jemmy:2.3.1.1'
    testCompile 'org.easytesting:fest-swing:1.2.1'
    testCompile 'junit:junit:4.11'
    testCompile 'com.google.guava:guava:16.0.1'
}

ErrorOutputListener errOut = new ErrorOutputListener()
cucumber {
    formats = ['pretty', "html:$buildDir/reports/cucumber"]
    gluePackages = ['asepsis.bluej.test.acceptance']
    environmentVars = ['bluej-jar':file("$selectedBluejDir/lib/bluej.jar").absolutePath]
    if (project.hasProperty('slowSwing')) environmentVars << ['slowSwing':true]
    if (project.hasProperty('tag')) tags = [tag]

    cucumber.logging.addStandardErrorListener(errOut)
}

cucumber.dependsOn ':takeBlueJHomeSnapshot', ':bluej-extension:installIntoBlueJ'
cucumber.finalizedBy 'checkForErrorOutput', ':restoreBlueJHomeSnapshot', ':bluej-extension:uninstallFromBlueJ'
check.finalizedBy cucumber

task checkForErrorOutput {
    group = '|Private (do not use)'

    doLast {
        def errStr = errOut.getOutput()
        if (errStr.contains('Caused by:'))
            throw new GradleException(formatErrMsg('Exception', errStr))
        if (errStr.contains('EDT violation'))
            throw new GradleException(formatErrMsg('EDT violation', errStr))
    }
}

String formatErrMsg(String errType, String errOutput) {
    return "\n==================================================================================\n" +
            "$errType detected in Cucumber output. Please review the output and the log below.\n" +
            "==================================================================================\n" +
            errOutput
}

class ErrorOutputListener implements StandardOutputListener {
    private ByteArrayOutputStream capturedStdErr = new ByteArrayOutputStream()
    private PrintWriter pw = new PrintWriter(capturedStdErr)

    @Override
    void onOutput(CharSequence output) {
        pw.write(output.toString());
    }

    String getOutput() {
        pw.close()
        return capturedStdErr.toString()
    }
}